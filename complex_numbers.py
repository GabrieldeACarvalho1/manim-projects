from manim import *
import numpy as np

class ComplexNumbers(Scene):
    def construct(self):
        WIACN = Text('O que é um número complexo? ').shift(DOWN*7)
        WIACN.set_fill(WHITE, opacity = 2.5)
        z_conj = Circle(radius = 5)
        z_conj.set_fill(BLUE, opacity = 2.5)
        z_conj.set_stroke(BLACK)
        z_conj_label = MathTex(r'\mathbb{C}', color = BLACK).shift(LEFT*4.5)
        r_conj = Circle(radius = 3.5).shift(RIGHT*1.4)
        r_conj.set_fill(RED, opacity = 8.5)
        r_conj.set_stroke(BLACK)
        r_conj_label = MathTex(r'\mathbb{R}', color = BLACK).shift(RIGHT*4.4)
        i_conj = Circle(radius = 1).shift(LEFT*2.8, UP*2.3)
        i_conj.set_fill(ORANGE, opacity = 3.5)
        i_conj.set_stroke(BLACK)
        i_conj_label = MathTex(r'\mathbb{I}', color = BLACK).shift(LEFT*2.8, UP*2.3)
        q_conj = Circle(radius = 2.7).shift(RIGHT*1.23)
        q_conj.set_fill(PINK, opacity = 1.5)
        q_conj.set_stroke(BLACK)
        q_conj_label = MathTex(r'\mathbb{Q}', color = BLACK).shift(RIGHT*3.6)
        int_conj = Circle(radius = 2).shift(RIGHT*1.3)
        int_conj.set_fill(YELLOW, opacity = 1.5)
        int_conj.set_stroke(BLACK)
        int_conj_label = MathTex(r'\mathbb{Z}', color = BLACK).shift(RIGHT*2.8)
        n_conj = Circle(radius = 1).shift(RIGHT*1.3)
        n_conj.set_fill(GREEN, opacity = 1.5)
        n_conj.set_stroke(BLACK)
        n_conj_label = MathTex(r'\mathbb{N}', color = BLACK).shift(RIGHT*1.3)

        self.play(Write(WIACN))
        self.play(Create(z_conj), Create(r_conj), Create(i_conj), Create(q_conj), Create(int_conj), Create(n_conj))
        self.play(Write(z_conj_label), Write(r_conj_label), Write(i_conj_label), Write(q_conj_label), Write(int_conj_label), Write(n_conj_label))
        self.wait(10)
        self.play(Unwrite(WIACN))
        self.play(Uncreate(z_conj), Uncreate(r_conj), Uncreate(i_conj), Uncreate(q_conj), Uncreate(int_conj), Uncreate(n_conj))
        self.play(Unwrite(z_conj_label), Unwrite(r_conj_label), Unwrite(i_conj_label), Unwrite(q_conj_label), Unwrite(int_conj_label), Unwrite(n_conj_label))
        conjugado = MathTex(r'z = a+bi', color = WHITE).shift(DOWN*7).scale(3)
        plane = NumberPlane(
            x_range = [-5, 5, 1],
            y_range = [-5, 5, 1],
            axis_config = {'color': WHITE},
            background_line_style = {'stroke_opacity': 0},
        )
        arc = Arc(radius = 1, start_angle = 0, angle = PI/4, color = WHITE)
        teta = MathTex(r'\theta', color = WHITE).shift(UP*1, RIGHT*1.5).scale(2)
        line = Line(start = 0*DOWN + 0*RIGHT, end = 3*RIGHT + 3*UP, color = WHITE)
        dashedline1 = DashedLine(UP*3 + RIGHT*0, UP*3 + RIGHT*3)
        dashedline2 = DashedLine(UP*0 + RIGHT*3, UP*3 + RIGHT*3)
        a = Text('a').shift(3*UP + LEFT*1)
        b = Text('b').shift(3*RIGHT + DOWN*1)
        point_a = Dot(point = plane.c2p(3, 0), color = WHITE)
        point_b = Dot(point = plane.c2p(0, 3), color = WHITE)
        z = MathTex(r'\|z|', color = WHITE).shift(UP*1.5, RIGHT*1).scale(2)
        z2 = MathTex(r'\|z|^2 = \sqrt{a^2+b^2}', color = WHITE).shift(UP*6).scale(2)
        self.play(Write(conjugado))
        self.play(Create(plane))
        self.play(Create(arc))
        self.play(Write(teta))
        self.play(Create(line))
        self.play(Create(point_a), Create(point_b), Create(dashedline1), Create(dashedline2))
        self.play(Write(a), Write(b), Write(z), Write(z2))
        self.wait(10)

        i_equal_to = MathTex(r'\i = \sqrt{-1}', color = WHITE).scale(2).shift(UP*3)
        ii = MathTex(r'\i^2 = -1', color = WHITE).scale(2).shift(UP*2)
        iii = MathTex(r'\i^3 = -\sqrt{-1}', color = WHITE).scale(2).shift(UP*1)
        iiii = MathTex(r'\i^4 = 1', color = WHITE).scale(2)

        self.play(Uncreate(plane), Uncreate(arc), Uncreate(line), Uncreate(point_a), Uncreate(point_b), Uncreate(dashedline1), Uncreate(dashedline2))
        self.play(Unwrite(conjugado), Unwrite(teta), Unwrite(a), Unwrite(b), Unwrite(z))
        self.play(Write(i_equal_to))
        self.wait(2)
        self.play(Write(ii))
        self.wait(2) 
        self.play(Write(iii))
        self.wait(2)
        self.play(Write(iiii))
        self.wait(10)

