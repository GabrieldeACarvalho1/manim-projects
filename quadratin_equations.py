from manim import *
import numpy as np

class Problems(Scene):
    def construct(self):
        self.camera.frame_width = 16
        self.camera.frame_height = 9
        self.camera.frame_center = ORIGIN
        introduction1 = MathTex(r'ax^2 + by + c = 0', color = RED).scale(1).shift(UP*2)
        introduction2 = Text('1) What if a = 0?', color = WHITE).scale(1)
        introduction3 = MathTex(r'2) \quad \text{What if} \quad \Delta < 0?').scale(1).shift(DOWN*2)
        introduction4 = Text('3) How can we make sure that', color = WHITE).scale(1).shift(DOWN*3.5)
        int4 = Text('user will type valid numbers values?', color = WHITE).scale(0.75).shift(DOWN*4)
        a_equal_to_0 = Text('If a = 0, We will see that the equation have only one root of solution.', color = WHITE).scale(0.75).shift(DOWN*4)
        ex = MathTex(r'1)').scale(1).shift(LEFT*4)
        ex1 = MathTex(r'0x^2 + 4x + 8 = 0').scale(2)
        ex1_2 = MathTex(r'4x = -8').scale(2)
        ex1_3 = MathTex(r'x = -2').scale(2)
        ex2 = MathTex(r'2)').scale(1).shift(LEFT*7)
        ex2_1 = Text('To adapt the algorithm for complex numbers').scale(1)
        ex2_1_1 = Text('we should note that: ').scale(1).shift(DOWN*1)
        i_equal_to = MathTex(r'\i = \sqrt{-1}').scale(2).shift(2*DOWN)
        ex2_2 = MathTex(r'\quad \text{So, with this we can make sure that when} \quad \Delta < 0,}', color = WHITE).scale(0.75)
        text22 = Text('the complex numbers will help us to solve the equations and find the roots.', color = WHITE).scale(0.5).shift(DOWN*0.5)
        ex2_3 = MathTex(r'16x^2 + 8x + 5 = 0').scale(2)
        ex2_4 = MathTex(r'\Delta = 8^2 - 4.16.5').scale(2)
        ex2_5 = MathTex(r'\Delta = 64 - 320').scale(2)
        ex2_6 = MathTex(r'\Delta = \sqrt{-256}').scale(2)
        ex2_7 = MathTex(r'\Delta = 16i').scale(2)
        ex2_8 = MathTex(r'x_1 = \frac{-8 + 16i}{2 \cdot 16}').scale(2)
        ex2_9 = MathTex(r'x_2 = \frac{-8 - 16i}{2 \cdot 16}').scale(2)
        ex2_10 = MathTex(r'x_1 = \frac{-1}{4} + \frac{i}{2}').scale(2)
        ex2_11 = MathTex(r'x_2 = \frac{-1}{4} - \frac{i}{2}').scale(2)
        ex3 = MathTex(r'3)').scale(1).shift(LEFT*4)
        ex3_1 = Text('We must make sure that the variables where').scale(0.5)
        desc3_1 = Text('the user will type the numbers are float.').scale(0.5).shift(DOWN*0.5)
        self.play(Write(introduction1), Write(introduction2), Write(introduction3), Write(introduction4), Write(int4))
        self.wait(3)
        self.play(ReplacementTransform(introduction2, ex), ReplacementTransform(introduction3, ex1), Unwrite(introduction4), Unwrite(int4))
        self.wait(3)
        self.play(Write(a_equal_to_0))
        self.play(ReplacementTransform(ex1, ex1_2))
        self.wait(3)
        self.play(ReplacementTransform(ex1_2, ex1_3))
        self.wait(3)
        self.play(ReplacementTransform(ex, ex2))
        self.wait(3)
        self.play(ReplacementTransform(ex1_3, ex2_1), ReplacementTransform(a_equal_to_0, ex2_1_1))
        self.wait(3)
        self.play(ReplacementTransform(ex2_1, i_equal_to), Unwrite(ex2_1_1))
        self.wait(3)
        self.play(Write(ex2_2))
        self.play(ReplacementTransform(i_equal_to, text22))
        self.wait(3)
        self.play(Unwrite(ex2_1_1))
        self.play(Unwrite(text22))
        self.play(ReplacementTransform(ex2_2, ex2_3))
        self.wait(3)
        self.play(ReplacementTransform(ex2_3, ex2_4))
        self.wait(3)
        self.play(ReplacementTransform(ex2_4, ex2_5))
        self.wait(3)
        self.play(ReplacementTransform(ex2_5, ex2_6))
        self.wait(3)
        self.play(ReplacementTransform(ex2_6, ex2_7))
        self.wait(3)
        self.play(ReplacementTransform(ex2_7, ex2_8))
        self.wait(3)
        self.play(ReplacementTransform(ex2_8, ex2_9))
        self.wait(3)
        self.play(ReplacementTransform(ex2_9, ex2_10))
        self.wait(3)
        self.play(ReplacementTransform(ex2_10, ex2_11))
        self.wait(3)
        self.play(ReplacementTransform(ex2, ex3))
        self.play(ReplacementTransform(ex2_11, ex3_1), Write(desc3_1))
        self.wait(5)